
@startuml
skinparam backgroundColor white

skinparam note {
    BackgroundColor #F1FFFF
    BorderColor #2980B9
}

skinparam activity {
    BackgroundColor #BDE3FF
    ArrowColor #2980B9
    BorderColor #2980B9
    StartColor #227BC6
    EndColor #227BC6
    BarColor #227BC6
}

skinparam sequence {
    ArrowColor  #2980B9
    DividerBackgroundColor  #BDE3FF
    GroupBackgroundColor    #BDE3FF
    LifeLineBackgroundColor white
    LifeLineBorderColor #2980B9
    ParticipantBackgroundColor  #BDE3FF
    ParticipantBorderColor  #2980B9
    BoxLineColor    #2980B9
    BoxBackgroundColor  #DDDDDD
}

skinparam actorBackgroundColor #FEFECE
skinparam actorBorderColor    #A80036

skinparam usecaseArrowColor   #A80036
skinparam usecaseBackgroundColor  #FEFECE
skinparam usecaseBorderColor  #A80036

skinparam classArrowColor #A80036
skinparam classBackgroundColor    #FEFECE
skinparam classBorderColor    #A80036

skinparam objectArrowColor    #A80036
skinparam objectBackgroundColor   #FEFECE
skinparam objectBorderColor   #A80036

skinparam packageBackgroundColor  #FEFECE
skinparam packageBorderColor  #A80036

skinparam stereotypeCBackgroundColor  #ADD1B2
skinparam stereotypeABackgroundColor  #A9DCDF
skinparam stereotypeIBackgroundColor  #B4A7E5
skinparam stereotypeEBackgroundColor  #EB937F

skinparam componentArrowColor #A80036
skinparam componentBackgroundColor    #FEFECE
skinparam componentBorderColor    #A80036
skinparam componentInterfaceBackgroundColor   #FEFECE
skinparam componentInterfaceBorderColor   #A80036

skinparam stateBackgroundColor #BDE3FF
skinparam stateBorderColor #2980B9
skinparam stateArrowColor #2980B9
skinparam stateStartColor black
skinparam stateEndColor   black


== 1. Submit ==
FCApp as "Fractional Cover App" -> util as "util.py" : init_task_app()
note right: Creates TaskDescription and work directories
FCApp <-- util : Task Description, Task Path

FCApp -> util : submit_subjob()
util -> qsub as "qsub.py" : QSubLauncher()

== 2. Generate ==


FCApp -> serialise as "serialise.py" : Load task description from disk (load_structure())
FCApp -> paths as "paths.py" : Load configuration from disk (read_document())
FCApp -> task_app as "task_app.py" : save_tasks()
FCApp <-- task_app: num_tasks_saved
FCApp -> FCApp : estimate job size


FCApp -> util : submit_subjob()
util -> qsub : QSubLauncher()


== 3. Run ==

note over task_app: Setup and Create Celery Task Runner

FCApp -> serialise : load_structure()
FCApp <-- serialise : Task Description
FCApp -> task_app : load_tasks()
FCApp <-- task_app  : configuration, Tasks

FCApp -> qsub : runner(task_desc, tasks, task_function, result_function)

qsub -> qsub : run_tasks()
note right: Uses the preconfigured 'executor'
@enduml
