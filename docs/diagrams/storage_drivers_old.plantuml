@startuml
'left to right direction

abstract rasterio.Band

package datacube.drivers {
    abstract DataSource #PaleGreen {
        Responsible for reading data for a single measurement for a single Dataset
        @contextmanager open()
        get_transform()
        get_bandnumber()
    }
    abstract Driver {
        name
        format
        uri_scheme
        index xxx
        requirements_satisfied()
        write_dataset_to_storage()
        as_uri()
        _init_index()
        get_datasource()
    }
}

package datacube.drivers.s3 {
    class S3Source {
        Similar API to rasterio.Band

        read(indexes, window, write_shape)
    }
    class S3DS {
        __init__(parent)
        read(indexes, window, out_shape)

    }
    class S3DataSource #PaleGreen {
        __init__(dataset, band_name, storage)
        @contextmanager open() : OverrideBandDataSource

    }
    class S3Driver {
        get_datasource(dataset, measurement_id) : S3DataSource

    }
}

rasterio.Band <|-- S3Source 

package datacube.drivers.netcdf {
    class NetCDFDriver {

    }
    Driver <|-- NetCDFDriver
}

package datacube.storage.storage {

    class BandDataSource #Cyan {
        Reads data from somewhere implementing the
        rasterio.Band Interface
        ..
        source : [rasterio.Band | S3Source]

        read()
        reproject()
    }
    class OverrideBandDataSource #Cyan {
        Allows reading data for a band, but uses the 
        CRS/Transform/NoData values stored in the
        Dataset and retrieved from the index
        ..
        source : [rasterio.Band | S3Source]

        read(window, out_shape)
        reproject()

    }

    abstract RasterioDataSource #PaleGreen {

    }
    DataSource <|-- RasterioDataSource
    class RasterFileDataSource {
        Only used for testing!
        ..
        __init__(filename, bandnumber, ...)

    }
    RasterioDataSource <|-- RasterFileDataSource
    class RasterDatasetDataSource #PaleGreen {
        __init__(dataset, measurement_id)
        @contextmanager open() : BandDataSource

    }
    RasterioDataSource <|-- RasterDatasetDataSource
}

OverrideBandDataSource *-- S3DataSource : Implemented Using
OverrideBandDataSource *-- RasterioDataSource : Implemented Using
BandDataSource *-- RasterioDataSource : Implemented Using
DataSource <|-- S3DataSource
Driver <|-- S3Driver
RasterDatasetDataSource *-- NetCDFDriver
S3DataSource *-- S3Driver
@enduml